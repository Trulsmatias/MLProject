import unittest
import numpy as np
from agent import NNAgent
from src.evolution import make_child, make_child_random_subsequence
from src.generations import Individual


class EvolutionTest(unittest.TestCase):
    def test_make_child(self):
        parents = [Individual(NNAgent((10, 10), 5)), Individual(NNAgent((10, 10), 5))]
        pw = [parent.agent.get_weights() for parent in parents]

        np.random.seed(42)
        child = make_child(parents)
        cw = child.agent.get_weights()

        parent_order = [0, 1, 0, 0, 0, 1, 0, 0, 0, 1]  # Generated from np.random.randint(0, 2) when seed = 42
        for i in range(10):
            i_parent = parent_order[i]
            # cw[0] is the W matrix of the first layer.
            # pw[i_parent] are the weights of the parent which gave genes to
            np.testing.assert_equal(cw[0][:, i], pw[i_parent][0][:, i])

    def test_make_child_random_subsequence(self):
        parents = [Individual(NNAgent((10, 10), 5)), Individual(NNAgent((10, 10), 5))]

        np.random.seed(42)
        child = make_child_random_subsequence(parents)
        weights = child.agent.get_weights()

        # Parent weights looks like this: [[W1, b1, W2, b2, W3, b3], [W1, b1, W2, b2, W3, b3]]
        parent_weights = [parent.agent.get_weights() for parent in parents]

        # Generated by alternating np.random.randint(1, 10) and np.random.randint(0, 2) when seed = 42
        subseq_len_values = iter([7, 8, 5, 3, 8, 4, 8, 6, 2, 6, 5, 6, 9, 3, 7, 9, 5, 7, 9, 2, 9, 2, 9, 5, 4, 7, 8, 3, 1,
                                  2, 4, 6, 4, 2, 2, 4, 8, 7, 9, 8, 2, 5, 9, 9, 1, 7, 8, 8, 3, 8, 3, 5, 7, 9, 7, 8, 2, 7,
                                  8, 3, 8, 3, 3, 3, 5, 7, 7, 9, 3, 7, 4, 4, 5, 7, 4, 7, 3, 2, 9, 6, 4, 7, 9, 1, 9, 9, 9,
                                  7, 8, 9, 5, 3, 8, 6, 8, 4, 1, 4, 7, 3])
        i_subseq_parent_values = iter([1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
                                       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,
                                       0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1,
                                       1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0])

        # Loop over each W and b matrix
        for i_m in range(0, len(weights)):  # i_m = index of matrix. i_m=0: W1, i_m=1: b1, 1_m=2: W2, etc.
            m_seq = weights[i_m].flatten(order='F')  # m_seq = matrix as flat number sequence, column-major
            m_seq_parents = [pw[i_m].flatten(order='F') for pw in parent_weights]  # parent matrices as flat number sequences
            # print(m_seq[:10])
            # print(m_seq_parents[0][:10])
            # print(m_seq_parents[1][:10])

            prev_subseq_end = 0  # End position of previous subsequence
            while prev_subseq_end < m_seq.size:  # Go on until previous subsequence end is larger than total sequence length
                try:
                    subseq_len = next(subseq_len_values)
                    i_subseq_parent = next(i_subseq_parent_values)  # index of parent to get subsequence from
                except StopIteration:
                    break
                # print('i_subseq_parent:', i_subseq_parent)
                # print(m_seq_parents[0])
                # print(m_seq_parents[1])
                current_subseq_end = prev_subseq_end + subseq_len

                np.testing.assert_equal(m_seq[prev_subseq_end:current_subseq_end],
                                        m_seq_parents[i_subseq_parent][prev_subseq_end:current_subseq_end],
                                        err_msg='Mismatch for matrix {} sequence, subseq [{}, {}]'
                                                .format(i_m, prev_subseq_end, current_subseq_end))

                prev_subseq_end = current_subseq_end


if __name__ == '__main__':
    np.random.seed(42)

    subseq_len_values = []
    i_subseq_parent_values = []
    for _ in range(100):
        subseq_len_values.append(np.random.randint(1, 10))
        i_subseq_parent_values.append(np.random.randint(0, 2))

    print(subseq_len_values)
    print(i_subseq_parent_values)

    unittest.main()
